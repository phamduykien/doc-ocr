#!/usr/bin/env python3
"""
Script test API ƒë∆°n gi·∫£n cho OCR-AI Service
"""
import requests
import json

# C·∫•u h√¨nh
API_BASE_URL = "http://localhost:8000"
API_V1_URL = f"{API_BASE_URL}/api/v1"

def test_document_processing():
    """Test x·ª≠ l√Ω t√†i li·ªáu b·∫±ng file PDF gi·∫£ l·∫≠p"""
    print("=== Test x·ª≠ l√Ω t√†i li·ªáu ===")
    
    # T·∫°o n·ªôi dung PDF gi·∫£ l·∫≠p (binary data)
    fake_pdf_content = b"%PDF-1.4\n1 0 obj\n<<\n/Type /Catalog\n/Pages 2 0 R\n>>\nendobj\n"
    
    try:
        # Upload v√† x·ª≠ l√Ω t√†i li·ªáu
        files = {'file': ('BIA_test_document.pdf', fake_pdf_content, 'application/pdf')}
        data = {
            'document_type': 'THONG_TIN_HO_SO',
            'ocr_language': 'vie+eng'
        }
        
        response = requests.post(f"{API_V1_URL}/documents/process", files=files, data=data)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Document Processing: SUCCESS")
            print(f"Document ID: {result.get('document_id')}")
            print(f"Filename: {result.get('filename')}")
            print(f"Document Type: {result.get('document_type')}")
            print(f"Status: {result.get('status')}")
            print(f"Total Pages: {result.get('total_pages')}")
            print(f"Processing Time: {result.get('processing_time'):.2f}s")
            
            if result.get('ai_extraction'):
                ai_result = result['ai_extraction']
                print(f"AI Confidence: {ai_result.get('confidence_score'):.2f}")
                print(f"Extracted Fields: {len(ai_result.get('fields', []))}")
                
                # Hi·ªÉn th·ªã m·ªôt v√†i tr∆∞·ªùng ƒë·∫ßu ti√™n
                fields = ai_result.get('fields', [])
                if fields:
                    print("Sample extracted fields:")
                    for field in fields[:3]:
                        print(f"  - {field['name']}: {field['value']} (confidence: {field['confidence_score']:.2f})")
            
            return result.get('document_id')
        else:
            print(f"‚ùå Document Processing: FAILED")
            print(f"Error: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Document Processing: ERROR - {e}")
        return None

def test_get_document(document_id):
    """Test l·∫•y th√¥ng tin t√†i li·ªáu"""
    if not document_id:
        return False
        
    print(f"\n=== Test l·∫•y th√¥ng tin t√†i li·ªáu {document_id} ===")
    
    try:
        response = requests.get(f"{API_V1_URL}/documents/{document_id}")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Get Document: SUCCESS")
            print(f"Document Type: {result.get('document_type')}")
            print(f"Created At: {result.get('created_at')}")
            return True
        else:
            print(f"‚ùå Get Document: FAILED - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Get Document: ERROR - {e}")
        return False

def test_document_fields(document_id):
    """Test l·∫•y tr∆∞·ªùng d·ªØ li·ªáu"""
    if not document_id:
        return False
        
    print(f"\n=== Test l·∫•y tr∆∞·ªùng d·ªØ li·ªáu {document_id} ===")
    
    try:
        response = requests.get(f"{API_V1_URL}/documents/{document_id}/fields")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Get Fields: SUCCESS")
            print(f"Document Type: {result.get('document_type')}")
            print(f"Confidence Score: {result.get('confidence_score'):.2f}")
            print(f"Number of Fields: {len(result.get('fields', []))}")
            return True
        else:
            print(f"‚ùå Get Fields: FAILED - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Get Fields: ERROR - {e}")
        return False

def test_statistics_after_processing():
    """Test th·ªëng k√™ sau khi x·ª≠ l√Ω t√†i li·ªáu"""
    print(f"\n=== Test th·ªëng k√™ sau x·ª≠ l√Ω ===")
    
    try:
        response = requests.get(f"{API_V1_URL}/statistics")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Statistics: SUCCESS")
            print(f"Total Documents: {result.get('total_documents')}")
            print(f"Average Processing Time: {result.get('average_processing_time'):.2f}s")
            print(f"Average Confidence: {result.get('average_confidence'):.2f}")
            
            # Hi·ªÉn th·ªã th·ªëng k√™ theo status
            by_status = result.get('by_status', {})
            if by_status:
                print("Status breakdown:")
                for status, count in by_status.items():
                    print(f"  - {status}: {count}")
            
            return True
        else:
            print(f"‚ùå Statistics: FAILED - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Statistics: ERROR - {e}")
        return False

def main():
    """Ch·∫°y test API v·ªõi x·ª≠ l√Ω t√†i li·ªáu"""
    print("üöÄ Test API v·ªõi x·ª≠ l√Ω t√†i li·ªáu gi·∫£ l·∫≠p")
    print(f"API Base URL: {API_BASE_URL}")
    print("-" * 50)
    
    # Ki·ªÉm tra k·∫øt n·ªëi
    try:
        response = requests.get(API_BASE_URL, timeout=5)
        if response.status_code != 200:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi service.")
            return
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi service: {e}")
        return
    
    # Test x·ª≠ l√Ω t√†i li·ªáu
    document_id = test_document_processing()
    
    if document_id:
        # Test c√°c API kh√°c v·ªõi document ƒë√£ t·∫°o
        test_get_document(document_id)
        test_document_fields(document_id)
        test_statistics_after_processing()
        
        print("\n" + "=" * 50)
        print("üéâ T·∫•t c·∫£ tests ho√†n th√†nh!")
        print(f"üìÑ Swagger UI: {API_BASE_URL}/docs")
        print(f"üìö ReDoc: {API_BASE_URL}/redoc")
    else:
        print("\n‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω t√†i li·ªáu, b·ªè qua c√°c test kh√°c.")

if __name__ == "__main__":
    main()
